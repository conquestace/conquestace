---
/* components/WildcardLoader.astro */
---
<!-- top-bar -->
<div class="flex flex-wrap items-center gap-3">
  <button id="loadDefaults"
          class="bg-lightblue text-midnight px-3 py-1 rounded">
    📂 Load default wildcards
  </button>

  <button id="clearWildcards"
          class="bg-red-500 text-white px-3 py-1 rounded">
    🧹 Clear wildcards
  </button>

  <label class="text-lightblue text-sm">
    Collection:
    <select id="collectionSelector" class="bg-slatecard p-1 rounded">
      <option value="danbooru">Danbooru</option>
      <option value="natural-language">Natural-language</option>
    </select>
  </label>

  <label class="text-lightblue text-sm">
    Categories:
    <div id="categoryBar" class="cat-scroll"></div>
  </label>
</div>

<div class="space-y-3 mt-4">
  <div id="drop" class="drop-zone">
    <p>📁 Drag wildcard .txt files here<br/>or click to browse</p>
    <input id="fileInput" type="file" accept=".txt" multiple hidden />
  </div>

  <ul id="fileList" class="space-y-1 text-lightblue text-sm font-mono"></ul>
</div>

<script is:client>
  /* — constants — */
  const HF_BASE =
    'https://huggingface.co/datasets/ConquestAce/wildcards/resolve/main/';
  const MANIFEST_MAP = {
    'danbooru':         'danbooru/manifest.json',
    'natural-language': 'natural-language/manifest.json'
  };

  /* — refs — */
  const drop   = document.getElementById('drop');
  const input  = document.getElementById('fileInput');
  const listEl = document.getElementById('fileList');
  const collSel= document.getElementById('collectionSelector');
  const catBar = document.getElementById('categoryBar');
  const loadBtn= document.getElementById('loadDefaults');
  const clearBtn=document.getElementById('clearWildcards');

  /* — state — */
  const store = new Map();         // filename → lines[]
  const selectedCats = new Set();  // active pills

  /* — helper: update file list — */
  function updateList() {
    listEl.innerHTML = '';
    [...store.keys()].sort().forEach(name => {
      const li = document.createElement('li');
      li.className = 'flex items-center justify-between bg-slatecard rounded px-2 py-1';
      li.innerHTML = `<span class="truncate">${name}</span>
                      <button class="text-red-400 hover:text-red-300">🗑️</button>`;
      li.querySelector('button').addEventListener('click', () => {
        store.delete(name); updateList(); dispatch();
      });
      listEl.appendChild(li);
    });
  }
  const dispatch = () =>
    window.dispatchEvent(new CustomEvent('wildcards-loaded',
      { detail: Object.fromEntries(store) }));

  /* — drag & picker — */
  drop.addEventListener('click', () => input.click());
  input.addEventListener('change', () => loadFiles(input.files));
  ['dragenter','dragover'].forEach(ev =>
    drop.addEventListener(ev, e => { e.preventDefault(); drop.classList.add('drag'); }));
  ['dragleave','drop'].forEach(ev =>
    drop.addEventListener(ev, e => { e.preventDefault(); drop.classList.remove('drag'); }));
  drop.addEventListener('drop', e => loadFiles(e.dataTransfer.files));

  async function loadFiles(files) {
    for (const f of files) {
      if (f.type !== 'text/plain') continue;
      store.set(f.name, (await f.text()).trim().split(/\r?\n/));
    }
    updateList(); dispatch();
  }

  /* — category pills — */
  async function populateCategories() {
    catBar.innerHTML=''; selectedCats.clear();
    try {
      const manifest = await fetch(HF_BASE + MANIFEST_MAP[collSel.value]).then(r=>r.json());
      [...new Set(manifest.map(e=>e.category.split('/').pop()))].sort()
        .forEach(cat => {
          const btn=document.createElement('div');
          btn.textContent=cat; btn.className='cat-btn';
          btn.onclick=()=>{ selectedCats.has(cat)
            ? (selectedCats.delete(cat), btn.classList.remove('active'))
            : (selectedCats.add(cat)   , btn.classList.add('active')); };
          catBar.appendChild(btn);
        });
    } catch(e){console.warn('[cat]',e);}
  }
  collSel.addEventListener('change', populateCategories);
  populateCategories();

  /* — load defaults — */
  loadBtn.onclick = async () => {
    const wantAll = selectedCats.size===0;
    const manifest = await fetch(HF_BASE + MANIFEST_MAP[collSel.value]).then(r=>r.json());
    for (const {name,path,category} of manifest) {
      const catLeaf=category.split('/').pop();
      if (!wantAll && !selectedCats.has(catLeaf)) continue;
      if (store.has(name)) continue;
      const txt = await fetch(HF_BASE + path).then(r=>r.text());
      store.set(name, txt.trim().split(/\r?\n/));
    }
    updateList(); dispatch();
  };

  /* — clear all — */
  clearBtn.onclick = () => {
    store.clear(); updateList(); dispatch();
  };
</script>
