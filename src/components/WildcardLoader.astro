---
/* components/WildcardLoader.astro */
---


<!-- ───── top controls ───── -->
<div class="flex flex-wrap items-center gap-3">
  <label class="text-lightblue text-sm">
    Collection:
    <select id="collectionSelector" class="bg-slatecard p-1 rounded">
      <option value="danbooru">Danbooru</option>
      <option value="natural-language">Natural-language</option>
    </select>
  </label>
</div>


<!-- ───── pill bars ───── -->
<label class="text-lightblue text-sm block mt-2">Categories:</label>
<div id="categoryBar" class="scroll-bar"></div>

<label class="text-lightblue text-sm block mt-2">Files:</label>
<div id="fileBar" class="file-wrap"></div>

<!-- ───── drag-drop box & file list ───── -->
<div class="space-y-3 mt-4">
  <div id="drop" class="drop-zone">
    <p>📁 Drag wildcard .txt files here<br/>or click to browse</p>
    <input id="fileInput" type="file" accept=".txt" multiple hidden />
  </div>
  <ul id="fileList" class="space-y-1 text-lightblue text-sm font-mono"></ul>
</div>
 <button id="loadDefaults"
          class="bg-lightblue text-midnight px-3 py-1 rounded">
    📂 Load default wildcards
  </button>

  <button id="clearWildcards"
          class="bg-red-500 text-white px-3 py-1 rounded">
    🧹 Clear wildcards
  </button>
<script is:client>
  /* ───────── constants ───────── */
  const HF_BASE =
    'https://huggingface.co/datasets/ConquestAce/wildcards/resolve/main/';
  const MANIFEST_MAP = {
    'danbooru':         'danbooru/manifest.json',
    'natural-language': 'natural-language/manifest.json'
  };

  /* ───────── element refs ───────── */
  const drop      = document.getElementById('drop');
  const input     = document.getElementById('fileInput');
  const listEl    = document.getElementById('fileList');
  const collSel   = document.getElementById('collectionSelector');
  const catBar    = document.getElementById('categoryBar');
  const fileBar   = document.getElementById('fileBar');
  const loadBtn   = document.getElementById('loadDefaults');
  const clearBtn  = document.getElementById('clearWildcards');

  /* ───────── state ───────── */
  const store         = new Map();          // filename → lines[]
  const selectedCats  = new Set();          // active category ids
  const selectedFiles = new Set();          // active file names
  const manifestCache = {};                 // collection id → manifest[]

  /* ───────── utility ───────── */
  const dispatch = () =>
    window.dispatchEvent(new CustomEvent('wildcards-loaded',
      { detail: Object.fromEntries(store) }));

  const updateList = () => {
    listEl.textContent = '';
    [...store.keys()].sort().forEach(name => {
      const li = document.createElement('li');
      li.className =
        'flex items-center justify-between bg-slatecard rounded px-2 py-1';
      const span = document.createElement('span');
      span.className = 'truncate';
      span.textContent = name;
      const btn = document.createElement('button');
      btn.className = 'text-red-400';
      btn.textContent = '🗑️';
      btn.onclick = () => { store.delete(name); updateList(); dispatch(); };
      li.append(span, btn);
      listEl.appendChild(li);
    });
  };

  /* ───────── drag-drop & picker ───────── */
  drop.onclick = () => input.click();
  input.onchange = () => addFiles(input.files);
  ['dragenter','dragover'].forEach(ev =>
    drop.addEventListener(ev, e => { e.preventDefault(); drop.classList.add('drag'); }));
  ['dragleave','drop'].forEach(ev =>
    drop.addEventListener(ev, e => { e.preventDefault(); drop.classList.remove('drag'); }));
  drop.addEventListener('drop', e => addFiles(e.dataTransfer.files));

  async function addFiles(fileList) {
    for (const f of fileList) {
      if (f.type !== 'text/plain') continue;
      store.set(f.name, (await f.text()).trim().split(/\r?\n/));
    }
    updateList(); dispatch();
  }

  /* ───────── manifest loader ───────── */
  async function getManifest(collection) {
    if (manifestCache[collection]) return manifestCache[collection];
    const data = await fetch(HF_BASE + MANIFEST_MAP[collection]).then(r=>r.json());
    manifestCache[collection] = data;
    return data;
  }

  /* ───────── category pills ───────── */
  async function populateCategories() {
    catBar.textContent=''; fileBar.textContent=''; selectedCats.clear(); selectedFiles.clear();
    const manifest = await getManifest(collSel.value);
    const cats = [...new Set(manifest.map(e=>e.category.split('/').pop()))].sort();

    cats.forEach(cat => {
      const pill = document.createElement('div');
      pill.textContent = cat; pill.className = 'pill';
      pill.onclick = () => {
        if (selectedCats.has(cat)) {
          selectedCats.delete(cat); pill.classList.remove('active');
          if (fileBar.dataset.cat === cat) { fileBar.textContent=''; selectedFiles.clear(); }
        } else {
          selectedCats.add(cat); pill.classList.add('active');
          populateFiles(cat, manifest);
        }
      };
      catBar.appendChild(pill);
    });
  }

  /* ───────── file pills ───────── */
  function populateFiles(cat, manifest) {
    fileBar.textContent=''; selectedFiles.clear();
    fileBar.dataset.cat = cat;

    manifest.filter(e => e.category.endsWith('/'+cat))
            .forEach(e => {
              const pill = document.createElement('div');
              pill.textContent = e.name; pill.className = 'pill';
              pill.onclick = () => {
                if (selectedFiles.has(e.name)) {
                  selectedFiles.delete(e.name); pill.classList.remove('active');
                } else {
                  selectedFiles.add(e.name); pill.classList.add('active');
                }
              };
              fileBar.appendChild(pill);
            });
  }

  collSel.addEventListener('change', populateCategories);
  populateCategories();             // initial load

  /* ───────── load defaults ───────── */
  loadBtn.onclick = async () => {
    const coll   = collSel.value;
    const manifest = await getManifest(coll);

    const wantAllCats  = selectedCats.size === 0;
    const wantAllFiles = selectedFiles.size === 0;

    for (const { name, path, category } of manifest) {
      const catLeaf = category.split('/').pop();

      if (!wantAllCats && !selectedCats.has(catLeaf)) continue;
      if (!wantAllFiles && !selectedFiles.has(name))  continue;
      if (store.has(name)) continue;

      const txt = await fetch(HF_BASE + path).then(r=>r.text());
      store.set(name, txt.trim().split(/\r?\n/));
    }
    updateList(); dispatch();
  };

  /* ───────── clear all ───────── */
  clearBtn.onclick = () => { store.clear(); updateList(); dispatch(); };
</script>
