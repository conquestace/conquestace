---
/* components/LLMControls.astro */
---

<div class="flex flex-col gap-4" data-llm>
  <!-- free-form additions -->
  <label class="font-medium text-white">üìÑ Extra instructions to the LLM</label>
  <textarea id="llm-notes" rows="3"
            class="w-full bg-slatecard p-2 rounded resize-y font-mono"></textarea>

  <label class="text-lightblue text-sm">
    <input id="instrFirst" type="checkbox" class="mr-1" />
    Place instructions before prompt
  </label>


  <!-- send -->
  <button id="send-btn"
          class="bg-green-700 text-white px-3 py-2 rounded disabled:opacity-40"
          disabled>
    üöÄ Send to LLM
  </button>
</div>

<script is:client>
  /* element refs */
  const btn   = document.getElementById('send-btn');
  const notes = document.getElementById('llm-notes');
  const instrFirst = document.getElementById('instrFirst');
  const spBox = document.getElementById('spBox');

  let llmConfig = {};

  function update() {
    const needsKey = llmConfig.provider === 'gemini' && !llmConfig.geminiKey;
    btn.disabled = !initialPrompt || !systemPrompt || needsKey;
  }

  let initialPrompt = '';
  let systemPrompt  = spBox?.value.trim() || '';
  update();

  /* get initial prompt from PromptBuilder */
  window.addEventListener('initial-prompt', e => {
    initialPrompt = e.detail.trim();
    update();
  });

  window.addEventListener('system-prompt-changed', e => {
    systemPrompt = e.detail.trim();
    update();
  });

  window.addEventListener('llm-config-changed', e => {
    llmConfig = e.detail || {};
    update();
  });

  /* click ‚Üí POST to Netlify function */
  btn.addEventListener('click', async () => {
    const needsKey = llmConfig.provider === 'gemini' && !llmConfig.geminiKey;
    if (!initialPrompt || !systemPrompt || needsKey) return;
    btn.disabled = true;
    post('üöÄ Sending to LLM‚Ä¶');

    try {
      const res = await fetch('/.netlify/functions/generatePrompt', {
        method : 'POST',
        headers: { 'Content-Type': 'application/json' },
        body   : JSON.stringify({
          initialPrompt: instrFirst.checked
            ? `${notes.value.trim()}\n\n${initialPrompt}`
            : `${initialPrompt}${notes.value.trim() ? `\n\n${notes.value.trim()}` : ''}`,
          systemPrompt,
          llm: llmConfig
        })
      });

      const { text, error } = await res.json();
      post(text || `‚ùå ${error || 'Generation failed.'}`);
    } catch (err) {
      post(`‚ùå Network error: ${err.message}`);
    } finally {
      btn.disabled = false;
    }
  });

  /* utility: publish to TerminalOutput */
  function post(msg) {
    window.dispatchEvent(new CustomEvent('terminal-msg', { detail: msg }));
  }
</script>
