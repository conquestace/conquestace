<div class="flex flex-col gap-4" data-llm>
  <!-- Free‑form LLM instructions -->
  <label class="font-medium text-white">📄 Extra instructions to the LLM</label>
  <textarea id="llm-notes" rows="3" class="w-full bg-slatecard p-2 rounded resize-y font-mono"></textarea>

  <!-- System prompt preset -->
  <label class="font-medium text-white">
    System‑prompt preset
    <select id="llmPreset" class="bg-slatecard p-1 rounded ml-2">
      <option value="danbooru">Danbooru preset</option>
      <option value="natural-language">Natural‑language preset</option>
    </select>
  </label>

  <!-- Primary action: toggles role based on provider presence -->
  <button id="llm-primary-btn" class="bg-green-700 text-white px-3 py-2 rounded disabled:opacity-40">
    ⚙️ Configure LLM
  </button>
</div>

<script is:client>
  const btn       = document.getElementById('llm-primary-btn');
  const notes     = document.getElementById('llm-notes');
  const presetSel = document.getElementById('llmPreset');

  let llmConfig      = {};
  let initialPrompt  = '';

  const hasProvider = () => !!llmConfig.provider;

  function refreshBtn() {
    if (hasProvider()) {
      btn.textContent = '🚀 Send to LLM';
      btn.disabled    = !initialPrompt;
    } else {
      btn.textContent = '⚙️ Configure LLM';
      btn.disabled    = false;
    }
  }

  // --- global events --------------------------------------------------
  window.addEventListener('initial-prompt', e => {
    initialPrompt = (e.detail || '').trim();
    refreshBtn();
  });

  window.addEventListener('llm-config-changed', e => {
    llmConfig = e.detail || {};
    refreshBtn();
  });

  // --- click handler --------------------------------------------------
  btn.addEventListener('click', async () => {
    // If no provider yet → open config overlay
    if (!hasProvider()) {
      document.getElementById('llm-open')?.click();
      return;
    }
    if (!initialPrompt) return;

    btn.disabled = true;
    post('🚀 Sending to LLM…');

    try {
      const res = await fetch('/.netlify/functions/generatePrompt', {
        method : 'POST',
        headers: { 'Content-Type':'application/json' },
        body   : JSON.stringify({
          initialPrompt,
          preset: presetSel.value,
          instructions: notes.value.trim(),
          llm: llmConfig
        })
      });
      const { text, error } = await res.json();
      post(text || `❌ ${error || 'Generation failed.'}`);
    } catch (err) {
      post(`❌ Network error: ${err.message}`);
    } finally {
      btn.disabled = !hasProvider() ? false : !initialPrompt;
    }
  });

  function post(msg) {
    window.dispatchEvent(new CustomEvent('terminal-msg', { detail: msg }));
  }

  // Initial render state
  refreshBtn();
</script>
