---
/* components/PromptBuilder.astro
   Builds an initial prompt, emits `initial-prompt` whenever the textarea changes */
---
<div class="flex flex-col gap-4" data-builder>
  <h2 class="font-medium text-lightblue text-lg">🎛️ Arrange & sample</h2>

  <!-- dynamic file list -->
  <ul id="file-list" class="space-y-2"></ul>
  <button id="add-text"
          class="bg-lightblue text-midnight px-2 py-1 rounded text-sm">
    ➕ Add text
  </button>

  <button id="build-btn"
          class="bg-blue-700 text-white px-3 py-2 rounded disabled:opacity-40"
          disabled>
    🔄 Build / Re-roll
  </button>

  <label class="font-medium text-white">📝 Initial prompt preview</label>
  <textarea id="prompt-box" rows="4"
            class="w-full bg-slatecard p-2 rounded resize-y font-mono
                   text-lightblue placeholder:text-slate-500"
            placeholder="Click “Build / Re-roll” to generate…"></textarea>
</div>

<script is:client>
  const list    = document.getElementById('file-list');
  const build   = document.getElementById('build-btn');
  const box     = document.getElementById('prompt-box');
  const addText = document.getElementById('add-text');

  /* entries can be wildcard or text */
  let items = [];

  /* ─────────── receive wildcards ─────────── */
  window.addEventListener('wildcards-loaded', e => {
    const wildcards = Object.entries(e.detail).map(([name, lines]) => ({
      type: 'wildcard', name, lines, count: 1
    }));
    items = [...items.filter(i => i.type === 'text'), ...wildcards];
    render();
    build.disabled = !items.length;
  });

  addText.onclick = () => {
    items.push({ type: 'text', value: '' });
    render();
    build.disabled = !items.length;
  };

  /* ─────────── build / re-roll ─────────── */
  build.addEventListener('click', () => {
    box.value = items.flatMap(it => {
      if (it.type === 'wildcard') return sample(it.lines, it.count);
      if (it.type === 'text') return it.value.trim() ? [it.value.trim()] : [];
      return [];
    }).join(', ').trim();
    fire();          // dispatch `initial-prompt`
  });

  /* manual edits propagate too */
  box.addEventListener('input', fire);

  /* ─────────── helpers ─────────── */
  function fire() {
    window.dispatchEvent(new CustomEvent('initial-prompt', {
      detail: box.value.trim()
    }));
  }

  /* random-with-replacement line picker */
  function sample(arr, n) {
    const out = [];
    for (let i = 0; i < n && arr.length; i++) {
      out.push(arr[Math.floor(Math.random() * arr.length)].trim());
    }
    return out;
  }

  /* redraw file list with drag-n-drop + count fields */
  function render() {
    list.textContent = '';
    items.forEach((it, idx) => {
      const li = document.createElement('li');
      li.className =
        'bg-slatecard p-2 rounded flex items-center gap-3 draggable';
      li.draggable = true;

      const move = document.createElement('span');
      move.className = 'cursor-move select-none';
      move.textContent = '↕️';

      const del = document.createElement('button');
      del.className = 'text-red-400';
      del.textContent = '🗑️';
      del.onclick = () => { items.splice(idx, 1); render(); build.disabled = !items.length; };

      if (it.type === 'wildcard') {
        const nameSpan = document.createElement('span');
        nameSpan.className = 'flex-1 truncate';
        nameSpan.textContent = it.name;
        const input = document.createElement('input');
        input.type = 'number';
        input.min = '1';
        input.value = it.count;
        input.className = 'w-16 bg-midnight text-lightblue p-1 rounded text-right';
        input.addEventListener('input', ev => {
          it.count = Math.max(1, +ev.target.value);
        });
        li.append(move, nameSpan, input, del);
      } else {
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = 'Custom text';
        input.value = it.value;
        input.className = 'flex-1 bg-midnight text-lightblue p-1 rounded';
        input.addEventListener('input', ev => {
          it.value = ev.target.value;
        });
        li.append(move, input, del);
      }

      /* drag & drop ordering */
      li.addEventListener('dragstart', e =>
        e.dataTransfer.setData('idx', idx));
      li.addEventListener('dragover', e => e.preventDefault());
      li.addEventListener('drop', e => {
        e.preventDefault();
        const from = +e.dataTransfer.getData('idx');
        items.splice(idx, 0, items.splice(from, 1)[0]);
        render();
      });

      list.appendChild(li);
    });
  }
</script>
