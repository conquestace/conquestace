---
// TerminalOverlay.astro
---

<div
  id="console-overlay"
  class="hidden fixed inset-0 z-[9999] bg-[#000000cc] backdrop-blur-sm text-lightblue p-6 pointer-events-none"
>
   <div class="max-w-2xl mx-auto border border-softgray rounded-lg p-4 bg-slatecard shadow-lg h-fit pointer-events-auto">

    <div class="text-sky mb-2 font-mono">CONSOLE MODE [ESC to exit]</div>

    <div
      id="console-log"
      class="h-64 overflow-y-auto text-sm font-mono mb-2 space-y-1"
    >
      <!-- Chat will be restored here -->
    </div>

    <form id="console-form" class="flex gap-2">
      <span class="text-sky">hacker@conquestace.com</span>:~$
      <input
        type="text"
        id="console-input"
        autocomplete="off"
        class="flex-1 text-lightblue rounded outline-none font-mono"
      />
    </form>
  </div>
</div>

<!-- GLOBAL SCRIPT -->
<script is:global>
  if (typeof window !== 'undefined') {
    const STORAGE_KEY = "terminalHistory";
    const TIMESTAMP_KEY = "terminalHistoryTimestamp";
    const ONE_DAY_MS = 24 * 60 * 60 * 1000;

    function loadHistory() {
      const stored = localStorage.getItem(STORAGE_KEY);
      return stored ? JSON.parse(stored) : [];
    }

    function saveToHistory(role, text) {
      const history = loadHistory();
      history.push({ role, text });
      localStorage.setItem(STORAGE_KEY, JSON.stringify(history));
      localStorage.setItem(TIMESTAMP_KEY, Date.now().toString());
    }

    function shouldClearHistory() {
      const last = parseInt(localStorage.getItem(TIMESTAMP_KEY) || "0");
      return (Date.now() - last) > ONE_DAY_MS;
    }

    function clearHistory() {
      localStorage.removeItem(STORAGE_KEY);
      localStorage.removeItem(TIMESTAMP_KEY);
    }

    function appendLine(role, text, logEl) {
      const div = document.createElement('div');
      const span = document.createElement('span');
      span.className = 'text-sky';
      span.textContent = role === 'user' ? 'hacker@conquestace' : 'sys';
      div.appendChild(span);
      div.append(role === 'user' ? ':~$ ' : ': ');
      div.append(document.createTextNode(text));
      logEl.appendChild(div);
    }

    function renderHistory(log) {
      const history = loadHistory();
      for (const entry of history) {
        appendLine(entry.role, entry.text, log);
      }
      log.scrollTop = log.scrollHeight;
    }

    document.addEventListener('keydown', (e) => {
      const overlay = document.getElementById('console-overlay');
      if (e.ctrlKey && e.key.toLowerCase() === 'x') {
        overlay.classList.toggle('hidden');
        overlay.querySelector('input')?.focus();
      }
      if (e.key === 'Escape') {
        overlay.classList.add('hidden');
      }
    });

    document.addEventListener('open-console-overlay', () => {
      const overlay = document.getElementById('console-overlay');
      overlay.classList.remove('hidden');
      overlay.querySelector('input')?.focus();
    });

    const form = document.getElementById('console-form');
    const input = document.getElementById('console-input');
    const log = document.getElementById('console-log');

    if (shouldClearHistory()) clearHistory();
    renderHistory(log);

    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      const userInput = input.value.trim();
      if (!userInput) return;

      if (userInput.toLowerCase() === "new chat" || userInput.toLowerCase() === "reset" || userInput.toLowerCase() === "clear") {
        clearHistory();
        log.textContent = '';
        appendLine('sys', 'Chat reset. New session initialized.', log);
        saveToHistory('sys', 'Chat reset. New session initialized.');
        input.value = '';
        return;
      }

      appendLine('user', userInput, log);
      saveToHistory('user', userInput);

      input.value = '';
      log.scrollTop = log.scrollHeight;

      // Construct full chatlog as OpenAI-style messages
      const history = loadHistory().filter(h => h.role === "user" || h.role === "sys");
      const messages = history.map(h => ({
        role: h.role === "user" ? "user" : "assistant",
        content: h.text
      }));
      messages.push({ role: "user", content: userInput });

      try {
        const response = await fetch("/.netlify/functions/llm-router", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ messages })
        });

        const data = await response.json();
        const output = data.text ?? "[no response]";

        appendLine('sys', output, log);
        saveToHistory("sys", output);

        log.scrollTop = log.scrollHeight;
      } catch (err) {
        appendLine('sys', `Error: ${err.message}`, log);
        saveToHistory('sys', `Error: ${err.message}`);

        log.scrollTop = log.scrollHeight;
      }
    });
  }
</script>