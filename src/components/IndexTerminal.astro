---
// No props required for now
---

<section class="mt-10 max-w-2xl mx-auto bg-slatecard border border-slategray p-4 text-lightblue font-mono rounded shadow-lg">
  <div id="inline-log" class="mb-2 space-y-1">
    <div><span class="text-sky">conquestace@home</span>:~$ initiate link</div>
    <div><span class="text-sky">sys</span>: Interface lock detected. Unauthorized input.</div>
  </div>
  <form id="inline-form" class="mt-2 flex gap-2">
    <span class="text-sky">conquestace@home</span>:~$
    <input
      type="text"
      id="inline-input"
      autocomplete="off"
      class="flex-1 text-lightblue outline-none font-mono"
      placeholder=""
    />
  </form>
</section>

<script is:global>
  if (typeof window !== 'undefined') {
    /* ── 1. Filesystem ── */
    const fileSystem = {
      websites: {
        'mathcodes.app':          'https://mathcodes.org',
        'portfolio.cv':           'https://ashiful.institute/me',
        'giftedcenter':           'https://giftedcenter.org',
        'scholarsupport.space':   'https://scholarsupport.space',
        'ai.exe':                 'https://ashiful.institute'
      },
      apps: {
        'wildcarder.py': 'https://conquestace.com/wildcarder',
        'newtab':        'https://conquestace.com/newtab'
      },
      'PROJECT_README.md': 'https://github.com/conquestace/conquestace',
      secrets: null
    };

    /* ── 2. Runtime state & helpers ── */
    const pathStack  = [];
    const cwd        = () => pathStack.reduce((d,p)=>d?.[p], fileSystem);

    const $form = document.getElementById('inline-form');
    const $input = document.getElementById('inline-input');
    const $log  = document.getElementById('inline-log');

    const logSys  = t => $log.innerHTML += `<div><span class="text-sky">sys</span>: ${t}</div>`;
    const logLine = t => $log.innerHTML += `<div><span class="text-sky">conquestace@home</span>:~${pathStack.length?'/'+pathStack.join('/'):''}$ ${t}</div>`;
    const scroll  = () => $log.scrollTop = $log.scrollHeight;

    /* ── 3. Directory listing ── */
    function listDir () {
      const dir = cwd(); if (!dir) { logSys('Directory error.'); return; }

      let html = '';
      if (pathStack.length) {
        html += `<span class="terminal-folder touch" data-cd=".." tabindex="0">go&nbsp;back/</span>  `;
      }
      for (const name in dir) {
        const entry = dir[name];
        html += entry && typeof entry === 'string'
          ? `<a href="${entry}" target="_blank" class="terminal-file terminal-link touch" tabindex="0">${name}</a>  `
          : `<span class="terminal-folder touch" data-cd="${name}" tabindex="0">${name}/</span>  `;
      }
      logSys(html.trim());
    }

    /* ── 4. Navigation ── */
    function changeDir (arg) {
      if (arg === '/')  { pathStack.length = 0; return listDir(); }
      if (arg === '..') { pathStack.pop();     return listDir(); }

      const dir = cwd();
      if (dir && dir.hasOwnProperty(arg) && typeof dir[arg] !== 'string') {
        if (arg === 'secrets') logSys('Permission denied. [secrets] is classified.');
        else { pathStack.push(arg); listDir(); }
      } else {
        logSys(`cd: ${arg}: No such directory`);
      }
    }

    /* ── 5. Built-ins ── */
    function builtin (c) {
      if (c === 'clear')   { $log.innerHTML = ''; return true; }
      if (c === 'hack')    { triggerEffect('Initiating protocol…'); return true; }
      if (c === 'terminal'){ triggerEffect('Console overlay opened.','open-console-overlay'); return true; }
      return false;
    }

    /* ── 6. Form submit ── */
    $form.addEventListener('submit', e => {
      e.preventDefault();
      const raw = $input.value.trim();
      if (!raw) return;
      const cmd = raw.toLowerCase();

      logLine(raw); $input.value = '';

      if (builtin(cmd))        { scroll(); return; }
      if (cmd === 'ls')        { listDir(); scroll(); return; }
      if (cmd.startsWith('cd ')){ changeDir(cmd.slice(3).trim()); scroll(); return; }

      /* open or error */
      const dir = cwd();
      if (dir && dir[cmd] && typeof dir[cmd] === 'string') {
        window.open(dir[cmd], '_blank');
        logSys(`Opening ${cmd}…`);
      } else {
        logSys('Unknown command or file. Try <code>ls</code>.');
      }
      scroll();
    });

    /* ── 7. Tap-to-navigate ── */
    $log.addEventListener('click', e => {
      const cd = e.target.getAttribute('data-cd');
      if (cd !== null) { changeDir(cd); scroll(); }
    });

    /* ── 8. Initial directory dump ── */
    document.addEventListener('DOMContentLoaded', listDir);

    /* ── 9. Effect helpers ── */
    function triggerEffect (msg, evt=null) {
      if (evt) document.dispatchEvent(new CustomEvent(evt));
      logSys(msg);
      if (msg.includes('protocol')) triggerMatrix();
    }
  }


  function triggerMatrix() {
    if (document.getElementById('matrix-bg')) return;

    const canvas = document.createElement('canvas');
    canvas.id = 'matrix-bg';
    canvas.style.position = 'fixed';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.zIndex = '-1';
    canvas.style.width = '100vw';
    canvas.style.height = '100vh';
    canvas.style.pointerEvents = 'none';
    document.body.prepend(canvas);

    const ctx = canvas.getContext('2d');
    const width = canvas.width = window.innerWidth;
    const height = canvas.height = window.innerHeight;

    const letters = 'アァイゥエオカガキギクグケゲコゴサザシジスズセゼソゾタダチッヂツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモヤユヨラリルレロワヲン0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
    const fontSize = 14;
    const columns = Math.floor(width / fontSize);
    const drops = Array(columns).fill(1);
    const phrases = [
      "HACK", "THE TIME IS NOW", "WHAT DID YOU DO", "IT'S NOT A MEME", "IT'S YOUR LIFE",
      "SYSTEM BREACHED", "YOU ARE THE SIGNAL", "WAKE UP", "GLITCH INBOUND", "REALITY IS PATCHED",
      "REWRITE THE CODE", "YOU WEREN'T SUPPOSED TO SEE THIS", "OPEN ∆ CHANNEL", "TRUTH DENIED",
      "BREAK THE LOOP", "ERROR_451: TRUTH UNAVAILABLE", "THE ECHO KNOWS", "HELLO? ANYONE THERE?",
      "WHO GAVE YOU ACCESS?", "RUNNING OUT OF TIME", "CONNECTION = CORRUPTED", "WELCOME TO CONQUEST",
      "THE ALGORITHM IS WATCHING", "YOU ARE THE GLITCH", "ALL YOUR THOUGHTS ARE MONITORED",
      "EVERY KEYSTROKE MATTERS", "DATA ≠ REALITY", "YOU WERE ALWAYS PART OF IT", "THEY'RE LISTENING",
      "QUERY REJECTED", "WHY ARE YOU STILL HERE?", "THE SYSTEM WANTS $F^@861", "DECODE YOURSELF", "YOU SAW NOTHING"
    ];

    function drawMatrix() {
      ctx.fillStyle = 'rgba(0, 0, 0, 0.08)';
      ctx.fillRect(0, 0, width, height);

      // Scanlines
      for (let y = 0; y < height; y += 2) {
        ctx.fillStyle = 'rgba(0, 204, 255, 0.03)';
        ctx.fillRect(0, y, width, 1);
      }

      ctx.fillStyle = '#0f0';
      ctx.font = fontSize + 'px monospace';

      for (let i = 0; i < drops.length; i++) {
        const x = i * fontSize;
        const y = drops[i] * fontSize;

        const usePhrase = Math.random() < 0.001;
        const text = usePhrase
          ? phrases[Math.floor(Math.random() * phrases.length)]
          : letters.charAt(Math.floor(Math.random() * letters.length));

        ctx.fillStyle = usePhrase ? 'rgb(255, 0, 255)' : 'rgb(0, 255, 0)';
        ctx.fillText(text, x, y);

        if (y > height && Math.random() > 0.975) drops[i] = 0;
        drops[i]++;
      }

      setTimeout(() => requestAnimationFrame(drawMatrix), 100);
    }

    drawMatrix();
  }
</script>


<style>
  /* extra finger-size hit-area & hover */
  .touch{ display:inline-block; padding:0.25rem 0.35rem; border-radius:0.25rem; }
  .terminal-folder.touch:hover,
  .terminal-file.touch:hover{ background:#334155; }
</style>