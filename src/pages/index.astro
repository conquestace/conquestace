---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Home - Project ConquestAce">
  <script>
    if (typeof window !== 'undefined') {
    const titles = [
  '[PROJECT]: CONQUEST ACE',
  '[PR0JECT]: CONQ∆ST ACE',
  '⧘PR0JEC7⁆: C0NQU3STA↯E',
  '[PR☠JECT⁆: CON☠QUESTACE',
  '[PRΞJECT]: CΞNQUEST Ω',
  '[PRJCT]: CQX|#000|ACE',
  '[PROJECT]: CONQUEST ♠',
  '█▓▒░PROJECT░▒▓█: CONQ',
  '⁅PROJECT⁆: C0nquest Ace',
  '[PR0JECT]: ConQuest Ace',
  '《PROJECT》: CONQUEST ace',
  '[PROJECT]: CONQUEST♠ace',
  '⧚PROJECT⧛: CONQUEST ♠ce',
  '⧚PRΞJECT⧛: CQNQ♠ST ACE',
  '⧚PROJECT⧛: CONQ•ACE',
  '⧚PRΞJECT⧛: C0NQU3ST A.C.E.',
  '⧘PROJECT]: K0NQUEST ACE',
  '《PROJECT》: CONQUEST.ΔCE',
  '⧘PR0JEC7]: CONQUEST▲CE',
  '[PRΞJECT]: CONQUE5T A©E',
  '⁅PROJECT⁆: ∴ CONQUESTACE ∵',
  '[PR0JEC7]: CONQUEST_ACE',
  '《PROJECT》: cOnQueSt AcE',
  '[PROJECT//]: CONQUEST\\ACE',
  '[PROJECT <<>>]: CONQUEST ACE',
  '[PRΞJECT <>]: CØNQUEST ACE',
  '[PROJECT ∆]: CQNQST ∆ ACE',
  '[ /\\/\\]: CONQ /\\',
  '[PROJECT [CONQ] {ACE}]',
  '[PROJECT ||]: CONQUEST || ACE',
  '{PROJECT}: CONQUEST ACE',
  '(PROJECT): CONQUEST ACE',
  '<PROJECT>: CONQUEST♠ACE',
  '⟨PROJECT⟩: CONQUEST♠ACE',
  '【PROJECT】: CONQUEST_ACE',
  '❲PROJECT❳: CONQUEST_ACE',
  '⎡PROJECT⎤: CONQUEST ACE',
  '⌈PROJECT⌉: CONQUEST_ACE',
  '《PROJECT》: CONQUEST ACE',
  '⟦PROJECT⟧: CONQUEST ACE',
  '⁅PROJECT⁆: CONQUEST ACE',
  '‹PROJECT›: CONQUEST ACE',
  '«PROJECT»: CONQUEST ACE',
  '〈PROJECT〉: CONQUEST ACE',
  '⧘PROJECT⧙: CONQUEST ACE',
  '⧓PROJECT⧒: CONQUEST ACE',
  '⦃PROJECT⦄: CONQUEST ACE',
  '⦅PROJECT⦆: CONQUEST ACE',
  '⧚PROJECT⧛: CONQ∆ST ACE',
  '⸨PROJECT⸩: CONQ∆ST ACE',
  '❴PROJECT❵: ∴ CONQUESTACE ∵',
  '⊏PROJECT⊐: CONQUEST ACE',
  '╭PROJECT╮: CONQUEST ACE'
];


      
      document.addEventListener("DOMContentLoaded", () => {
        
        const headerText = document.getElementById('glitch-home-title');
        let i = 0;
        setInterval(() => {
          i = (i + 1) % titles.length;
          // @ts-ignore
          headerText.textContent = titles[i];
        }, 1800 + Math.random() * 1200);
      });
    }
  </script>

  <style>
    .glitch-home {
      position: relative;
      font-size: 2.75rem;
      font-weight: bold;
      color: #1b91d6;
      font-family: monospace;
      white-space: nowrap;
      overflow: hidden;
      text-align: center;
      margin-top: 3rem;
      
    }

    .glitch-home::before,
    .glitch-home::after {
      content: attr(data-glitch);
      position: absolute;
      left: 0;
      width: 100%;
      pointer-events: none;
      opacity: 0.5;
      mix-blend-mode: lighten;
    }

    .glitch-home::before {
      color: #ff00c8;
      animation: glitch-left 1.8s infinite ease-in-out;
    }

    .glitch-home::after {
      color: #00ffff;
      animation: glitch-right 1.4s infinite ease-in-out;
    }

    @keyframes glitch-left {
      0%, 100% { transform: translate(0); }
      25% { transform: translate(-2px, -1px); }
      50% { transform: translate(1px, 2px); }
      75% { transform: translate(-1px, 1px); }
    }

    @keyframes glitch-right {
      0%, 100% { transform: translate(0); }
      25% { transform: translate(2px, 1px); }
      50% { transform: translate(-1px, -2px); }
      75% { transform: translate(1px, -1px); }
    }

  </style>


  <h1 id="glitch-home-title" class="glitch-home" data-glitch="[PROJECT]: conquest ace">[PROJECT]: conquestace
  </h1>

 <section class="text-center mt-12">
  <a href="/tab" class="text-lightblue text-xl font-semibold tracking-widest hover:text-hoverblue transition duration-300">
    >>> ENTER THE GLITCH
  </a>
</section>

 <section class="mt-10 max-w-2xl mx-auto bg-slatecard border border-slategray p-4 text-lightblue font-mono rounded shadow-lg">
  <div id="inline-log" class="mb-2 space-y-1">
    <div><span class="text-sky">conquestace@home</span>:~$ initiate link</div>
    <div><span class="text-sky">sys</span>: Interface lock detected. Unauthorized input.</div>
  </div>
  <form id="inline-form" class="mt-2 flex gap-2">
    <span class="text-sky">conquestace@home</span>:~$
    <input type="text" id="inline-input" autocomplete="off" class="flex-1 text-lightblue outline-none font-mono" placeholder="" />
  </form>
</section>



<script>

const inlineForm = document.getElementById('inline-form');
const inlineInput = document.getElementById('inline-input');
const inlineLog = document.getElementById('inline-log');

const fileSystem = {
  'mathcodes.app': 'https://mathcodes.org',
  'ashiful.app': 'https://ashiful.conquestace.com',
  'giftedcenter.app': 'https://giftedcenter.org',
  'ai.ashiful.app': 'https://ashifulinstitute.com',
  'PROJECT_README.md': 'https://github.com/conquestace/conquestace',
  'secrets/': null  // non-clickable
};

inlineForm.addEventListener('submit', (e) => {
  e.preventDefault();
  const inputText = inlineInput.value.trim();
  if (!inputText) return;

  const cmd = inputText.toLowerCase();
  inlineLog.innerHTML += `<div><span class="text-sky">conquestace@home</span>:~$ ${inputText}</div>`;
  inlineInput.value = '';

  if (cmd === 'clear') {
    inlineLog.innerHTML = '';
    return;
  }

  if (cmd === 'ls') {
    let output = '<div><span class="text-sky">sys</span>: ';
    for (const name in fileSystem) {
      const isFolder = name.endsWith('/');
      const href = fileSystem[name];
      if (href) {
        output += `<a href="${href}" target="_blank" class="terminal-file terminal-link">${name}</a>  `;
      } else {
        output += `<span class="terminal-folder">${name}</span>  `;
      }
    }
    output += '</div>';
    inlineLog.innerHTML += output;
  } else if (cmd.startsWith('cd ')) {
    const folder = cmd.slice(3).trim();
    if (folder === 'secrets' || folder === 'secrets/') {
      inlineLog.innerHTML += `<div><span class="text-sky">sys</span>: Permission denied. [secrets] is classified.</div>`;
    } else {
      inlineLog.innerHTML += `<div><span class="text-sky">sys</span>: cd: ${folder}: No such directory</div>`;
    }
  } else if (fileSystem.hasOwnProperty(cmd)) {
    const link = fileSystem[cmd];
    if (link) {
      window.open(link, '_blank');
      inlineLog.innerHTML += `<div><span class="text-sky">sys</span>: Opening ${cmd}...</div>`;
    } else {
      inlineLog.innerHTML += `<div><span class="text-sky">sys</span>: ${cmd} is a directory. Use <code>cd</code> instead.</div>`;
    }
  } else {
    inlineLog.innerHTML += `<div><span class="text-sky">sys</span>: Unknown command or file. Try <code>ls</code> or press Ctrl+X.</div>`;
  }

  inlineLog.scrollTop = inlineLog.scrollHeight;
});



if (typeof window !== 'undefined') {
  document.addEventListener('keydown', (e) => {
    if (e.ctrlKey && e.key.toLowerCase() === 'x') {
      const overlay = document.getElementById('console-overlay');
      overlay.classList.toggle('hidden');
      overlay.querySelector('input')?.focus();
    }
    if (e.key === 'Escape') {
      document.getElementById('console-overlay').classList.add('hidden');
    }
  });

  const form = document.getElementById('console-form');
  const input = document.getElementById('console-input');
  const log = document.getElementById('console-log');

  form.addEventListener('submit', async (e) => {
    e.preventDefault();
    const userInput = input.value.trim();
    if (!userInput) return;

    // Print user input
    log.innerHTML += `<div><span class="text-sky">user@conquestace</span>:~$ ${userInput}</div>`;
    input.value = '';
    log.scrollTop = log.scrollHeight;

    try {
      // Get response from Gemini via Netlify function
      const response = await sendToGemini(userInput);
      log.innerHTML += `<div><span class="text-sky">sys</span>: ${response}</div>`;
      log.scrollTop = log.scrollHeight;
    } catch (err) {
      log.innerHTML += `<div><span class="text-sky">sys</span>: Error contacting Gemini: ${err.message}</div>`;
      log.scrollTop = log.scrollHeight;
    }
  });

  async function sendToGemini(inputText) {
    const res = await fetch("/.netlify/functions/gemini", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ input: inputText })
    });

    if (!res.ok) {
      throw new Error(`HTTP ${res.status}`);
    }

    const data = await res.json();
    return data.text;
  }
}
</script>




<div id="console-overlay" class="hidden fixed inset-0 bg-[#000000cc] backdrop-blur-sm text-lightblue p-6 z-50">
  <div class="max-w-2xl mx-auto border border-softgray rounded-lg p-4 bg-slatecard">
    <div class="text-sky mb-2 font-mono">CONSOLE MODE [ESC to exit]</div>
    
    <div id="console-log" class="h-64 overflow-y-auto text-sm font-mono mb-2 space-y-1">
      <div><span class="text-sky">user@conquestace</span>:~$ <span class="text-lightblue">Hello</span></div>
      <div><span class="text-sky">sys</span>: Hello, Agent. Awaiting your next directive.</div>
    </div>
    
    <form id="console-form" class="flex gap-2">
      <span class="text-sky">user@conquestace</span>:~$
      <input type="text" id="console-input" autocomplete="off" class="flex-1 bg-midnight text-lightblue p-2 rounded outline-none font-mono" />
    </form>
  </div>
</div>
</BaseLayout>
